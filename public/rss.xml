<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nikolas Rist</title>
  <subtitle></subtitle>
  <link href="https://www.dev.nehranis.de/rss.xml" rel="self"/>
  <link href="https://www.dev.nehranis.de/"/>
  <updated>2024-12-27T00:00:00Z</updated>
  <id>https://www.dev.nehranis.de//</id>
  <author>
    <name>Nikolas Rist</name>
    <email>nehranis@gmail.com</email>
  </author><entry>
          <title>Kotlin Fundamentals - Numbers</title>
          <link href="https://www.dev.nehranis.de/posts/kotlin-numbers/"/>
          <updated>2024-12-27T00:00:00Z</updated>
          <id>https://www.dev.nehranis.de/posts/kotlin-numbers/</id>
          <content type="html">
          &lt;h2 id=&quot;introduction&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/kotlin-numbers/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kotlin has several different data types for numbers. This blog post provides some basic information on how they look like and how they can be used. Additionally it discusses basic concepts which are new in Kotlin.&lt;/p&gt;
&lt;h2 id=&quot;integer&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/kotlin-numbers/#integer&quot;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The default types for Integers are signed. This means they have a range from negative to positive values.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Byte (8 Bit) from -128 until 127&lt;/li&gt;
&lt;li&gt;Short (16 Bit) from -32768 until 32767&lt;/li&gt;
&lt;li&gt;Int (32 Bit) from -2,147,483,648 (-2^31) until 2,147,483,647 (2^31 - 1)&lt;/li&gt;
&lt;li&gt;Long (64 Bit) from -9,223,372,036,854,775,808 (-2^63) until 9,223,372,036,854,775,807 (2^63 - 1)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you initialise a variable without an explicit type, the compiler infers the type from the smallest range not exceeding &lt;code&gt;Int&lt;/code&gt;. If it exceeds &lt;code&gt;Int&lt;/code&gt; it is a &lt;code&gt;Long&lt;/code&gt; value. This means that &lt;code&gt;val myNumber = 1&lt;/code&gt; infers the type &lt;code&gt;Int&lt;/code&gt; for &lt;code&gt;myNumber&lt;/code&gt; even though it would fit into a &lt;code&gt;Byte&lt;/code&gt;or &lt;code&gt;Short&lt;/code&gt; type. As soon as you have a value bigger than int e.g. &lt;code&gt;val myNumber = 4000000000&lt;/code&gt; it is with type &lt;code&gt;Long&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is important to understand that in Kotlin every number type is an &lt;code&gt;Object&lt;/code&gt;. There are no &lt;code&gt;primitive&lt;/code&gt; types as in Java.&lt;br /&gt;
Nevertheless they are compiled into a primitive Java type as long as they are not nullable.&lt;br /&gt;
Nullable numbers in Kotlin are compiled into boxed Java Classes representations.&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myInt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// compiled to the primitive integer value&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myInt&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Int&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// compiled to a object wrapped Integer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;float&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/kotlin-numbers/#float&quot;&gt;Float&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In contrast to the four different number types for Integer numbers, Kotlin provides two for floating numbers.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Float&lt;/code&gt; 32 Bits -&amp;gt; Significant Bits: 24, Exponent Bits: 8, decimal digits: 6-7&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Double&lt;/code&gt;64 Bits -&amp;gt; Signifcant Bits: 53, Exponent Bits: 11, decimal digits: 15-16&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Float&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MIN_VALUE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1.4E-45&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Float&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MAX_VALUE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 3.4028235e38&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Double&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MIN_VALUE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 4.9E-324&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Double&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MAX_VALUE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1.7976931348623157E308&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The E-Notation explained in short: The &lt;code&gt;e&lt;/code&gt; stands for &amp;quot;number times ten to the power of ...&amp;quot;. So for example it is &lt;code&gt;3.4028235 times ten to the power of 38&lt;/code&gt;. So you would shift the &lt;code&gt;.&lt;/code&gt; for &lt;code&gt;38&lt;/code&gt; positions to the right. In the example this would result in &lt;code&gt;340 282 350 000 000 000 000 000 000 000 000 000 000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Kotlin goes with &lt;code&gt;double&lt;/code&gt; as the default floating number, if the compiler infers the type.&lt;/p&gt;
&lt;p&gt;It is important to know that Kotlin does not have implicit widening or conversion of numbers.&lt;br /&gt;
Every number needs to be explicitly converted to be used with a different number type.&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42.0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; equal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; d &lt;span class=&quot;token comment&quot;&gt;// does not work as Int and Double can not be compared&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; equalTwo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// would work as double is converted to Int.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;interesting-to-know&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/kotlin-numbers/#interesting-to-know&quot;&gt;Interesting to know&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;jvm-representation&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/kotlin-numbers/#jvm-representation&quot;&gt;JVM representation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On the JVM platform numbers are stored in their primitive types. &lt;code&gt;Int -&amp;gt; int&lt;/code&gt; or &lt;code&gt;Double -&amp;gt; double&lt;/code&gt;. If you mark a number as nullable &lt;code&gt;Int?&lt;/code&gt; it will be boxed in the Java Classes &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt; respectively.&lt;/p&gt;
&lt;h3 id=&quot;bit-operations&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/kotlin-numbers/#bit-operations&quot;&gt;Bit operations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Bit operations e.g. &lt;code&gt;shl&lt;/code&gt; or &lt;code&gt;shr&lt;/code&gt; etc. See a full list in the &lt;a href=&quot;https://kotlinlang.org/docs/numbers.html#bitwise-operations&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;float-comparison&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/kotlin-numbers/#float-comparison&quot;&gt;Float comparison&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If the operands are statically known as &lt;code&gt;Float&lt;/code&gt; or &lt;code&gt;Double&lt;/code&gt;, the operations follow the &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754&quot;&gt;IEE 754 Standard&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/kotlin-numbers/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Kotlin implementation for numbers is convenient to use, but in details complex. I tried to come up with an overview image of the different ranges of existing number types.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dev.nehranis.de/assets/img/kotlin_numbers.png&quot; alt=&quot;Overview of Kotlin Number Types&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:michael@mharley.dev?subject=Re:%20%E2%80%9CKotlin%20Fundamentals%20-%20Numbers%E2%80%9D&quot;&gt;Reply via email&lt;/a&gt;&lt;/p&gt;
          </content>
        </entry><entry>
          <title>PostgreSQL Index Creation - How it works</title>
          <link href="https://www.dev.nehranis.de/posts/index-creation/"/>
          <updated>2024-04-12T00:00:00Z</updated>
          <id>https://www.dev.nehranis.de/posts/index-creation/</id>
          <content type="html">
          &lt;p&gt;This blog provides a short overview of index creation in PostgreSQL and tries to give some insights what to take into consideration how to built it.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createindex.html&quot;&gt;CREATE INDEX&lt;/a&gt; documentation is the best starting point to understand how index creation works. Nevertheless, I tried to point out the most important information in this blog post. Therefore, I will not write down all possible parameters, as they can be looked up in the documentation easily.&lt;/p&gt;
&lt;h2 id=&quot;index-types&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/index-creation/#index-types&quot;&gt;Index Types&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PostgreSQL provides the following types: &lt;code&gt;B-tree&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt;, &lt;code&gt;GiST&lt;/code&gt;, &lt;code&gt;SP-GiST&lt;/code&gt;, &lt;code&gt;GIN&lt;/code&gt;, and &lt;code&gt;BRIN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The default index is &lt;code&gt;B-tree&lt;/code&gt; and for most default use cases a very good choice. When you should use another index is not part of this post.&lt;/p&gt;
&lt;h2 id=&quot;concurrent-option&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/index-creation/#concurrent-option&quot;&gt;Concurrent option&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Essential is the decision to build the index concurrently or not. But, to decide you need to know the differences of a non-concurrent and a concurrent build. Here we go:&lt;/p&gt;
&lt;p&gt;The default &lt;code&gt;CREATE INDEX&lt;/code&gt; command builds the index non-concurrently. This means the table will be locked for &lt;code&gt;write&lt;/code&gt;operations, whereas &lt;code&gt;read&lt;/code&gt; operations are still possible. For a production system, this means that your application is unable to persist any data until the index build is finished. &lt;code&gt;CREATE INDEX CONCURRENTLY&lt;/code&gt; in contrast, builds the index in a concurrent way, so &lt;code&gt;write&lt;/code&gt; operations are still allowed, but at a cost.&lt;/p&gt;
&lt;h3 id=&quot;how-it-works-in-detail&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/index-creation/#how-it-works-in-detail&quot;&gt;How it works in detail&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CREATE INDEX&lt;/code&gt; locks the table and can build the index with one table scan. It will not be interrupted or have to wait for any other operation, as long as there is no transaction already running that collides with the &lt;code&gt;ExclusiveLock&lt;/code&gt; acquired by &lt;code&gt;CREATE INDEX&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dev.nehranis.de/assets/img/index_creation.png&quot; alt=&quot;index_creation&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CREATE INDEX CONCURRENTLY&lt;/code&gt; works differently; within a first transaction, the index itself is created in the system catalogs and marked as &lt;code&gt;invalid&lt;/code&gt; (phase 1). After this, the build process needs two more transactions with one table scan each. Before it can start the second phase (first table scan), it has to wait for any transaction potentially updating data. The third phase (second table scan) might be the most expensive one, as this transaction has to wait for any other transaction to finish, which contains a &lt;code&gt;snapshot&lt;/code&gt;. This can even be an index built on an entirely different table. You might think that the index is done after the three phases; that&#39;s true, but the index is only usable as soon as any transaction finishes, which predates the start of the index build.&lt;/p&gt;
&lt;p&gt;It is important to know, that if a concurrent index creation fails, the &lt;code&gt;invalid&lt;/code&gt; index stays and will be updated already. This has an impact on other operations and resource consumption. So take care of removing &lt;code&gt;invalid&lt;/code&gt; indexes or ensure to finally create them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dev.nehranis.de/assets/img/concurrent_index.png&quot; alt=&quot;concurrent_index&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;decision-factors&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/index-creation/#decision-factors&quot;&gt;Decision factors&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now you know, at a high level, how both approaches create indexes. Now the big question is, which should I use? As often in engineering, the answer is that it heavily depends on your use case if you build the index concurrently or not. You need to take the following aspects into account to decide:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Main purpose of the table (read or write heavy)&lt;/li&gt;
&lt;li&gt;Table size&lt;/li&gt;
&lt;li&gt;Complexity of the index itself (single column vs. expression)&lt;/li&gt;
&lt;li&gt;How complex is your database and how easy is it to clean up broken state?&lt;/li&gt;
&lt;li&gt;Does the index creation block your release?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This list of questions/facts is sorted by my opinion of their importance. The first and most important question is: can we accept a possible &lt;code&gt;write lock&lt;/code&gt; on the table we want to create the index on? Definitely, this depends on two and three, as this plays into account how long it takes. Unfortunately, I am unable to give a golden number when the size of the table is too big for a non-concurrent index creation. It is the combination of operations running against the table and its size.&lt;/p&gt;
&lt;p&gt;Point four and five should not be ignored, as this can have a big impact on when you run such an index creation and what is the impact on your current work.&lt;/p&gt;
&lt;p&gt;For us, most tables we created indexes for in the past have been big, which resulted in hours of index creation for some databases. Therefore, we give these questions some more weight to decide which index creation we use. Another fact giving this a higher weight is that we have multiple teams working on this monolithic service. We are managing our database schemas with Liquibase migrations, including index creations. This we do, as we have several instances of our services working on their own database. This is subject to change in the future, but as of today, we have to take this into consideration. Therefore, the index creation is part of our release pipeline, and long-running index builds block following releases until they are done.&lt;/p&gt;
&lt;p&gt;We have schema separation for our tenants, which makes the clean-up if concurrent index creation fails more complex. We ran into situations where concurrent index creation failed, and we manually had to clean the state of multiple schemas before we could trigger a new release. Nevertheless, most times, it is less painful than blocking a table against &lt;code&gt;write&lt;/code&gt; operations for several hours.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/index-creation/#summary&quot;&gt;Summary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Concurrent index creation can be really slow. Therefore, it might be worth having a shorter time frame for being blocked with &lt;code&gt;write&lt;/code&gt; operations and building the index non-concurrently. If you have a huge table that has a lot of &lt;code&gt;write&lt;/code&gt; operations, you might accept the long-running index built while still being able to keep your system running. If you have a table with mostly &lt;code&gt;read&lt;/code&gt; operations and occasional updates, you probably should go with the non-concurrent index build.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:michael@mharley.dev?subject=Re:%20%E2%80%9CPostgreSQL%20Index%20Creation%20-%20How%20it%20works%E2%80%9D&quot;&gt;Reply via email&lt;/a&gt;&lt;/p&gt;
          </content>
        </entry><entry>
          <title>My way back from management to coding</title>
          <link href="https://www.dev.nehranis.de/posts/ic-to-em/"/>
          <updated>2024-04-04T00:00:00Z</updated>
          <id>https://www.dev.nehranis.de/posts/ic-to-em/</id>
          <content type="html">
          &lt;p&gt;On January 1, 2023, I started as an engineering manager (EM) after a few years of being an Individual Contributor (IC). You can find some insights if you want to become a manager in my previous &lt;a href=&quot;https://engineering.leanix.net/blog/em-90-days/&quot;&gt;blog post&lt;/a&gt;, or how to manage your time to keep engineering while managing a team in Tom&#39;s &lt;a href=&quot;https://engineering.leanix.net/blog/how-to-keep-the-engineer-in-engineering-manager/&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On November 15, I stepped back from the manager role to an IC role. This was one of the best decisions I have ever made. I am thankful and happy about the opportunity and the time I spent as an EM. This blog post reveals some learnings I made about how and why I decided to step back into the IC track. You might ask yourself, why is he writing six months later? That&#39;s easy, and the reasons are threefold: First, I used the time to get back into my new role/working mode. Second, it took some time to reflect on the past year and be able to sort my thoughts, and third, I became a father in February, which shifted my focus from work to private life drastically.&lt;/p&gt;
&lt;h2 id=&quot;it-was-a-success-not-a-fail&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/ic-to-em/#it-was-a-success-not-a-fail&quot;&gt;It was a success - not a fail&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The crucial takeaway is that I do not regret anything or see it as a failure. In the eleven months of being a manager, I learned so much about myself, my priorities, my character, how to manage people, and how important it is to have a good relationship with your teammates and with your own manager.&lt;br /&gt;
I can truly say that we have a great engineering culture at LeanIX. From day one I got a lot of support from all my colleagues. My director, who played a significant role in my journey, offered me a weekly 1:1. We talked openly about all the issues, struggles, and doubts I had. This helped me a lot to reframe the experience as a win and growth opportunity rather than a failure or setback.&lt;/p&gt;
&lt;p&gt;I embraced a new challenge and was able to perform well - I continuously received positive feedback from everyone around me, my team and other managers.&lt;br /&gt;
I was able to learn so many things in the company&#39;s organized leadership training. It provided me opportunities to connect with many others in the company with whom I might not have interacted otherwise. I got an entirely new view of how things run in a company and how people work together.&lt;br /&gt;
Conducting salary negotiations and performance reviews was a wholly new and challenging experience. Hiring new people and being accountable for these hires showed me all the different angles one has to consider when building and leading a team.&lt;br /&gt;
Another great learning was the fact that I took over a team with people with whom I worked beforehand, and now, as an individual contributor, I am placed in the same team I managed before. It is a testimony to the people and culture at LeanIX that it feels quite normal not to be the team&#39;s manager anymore.&lt;/p&gt;
&lt;h2 id=&quot;my-reasons-to-step-back-as-manager&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/ic-to-em/#my-reasons-to-step-back-as-manager&quot;&gt;My reasons to step back as manager&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know that I am one of these people who like to push things forward and lead people. Nevertheless, the role of engineering manager does not boil down to only leading people; it also entails managing people. This aspect means it is your job to ensure these people can grow and take the next steps in their career. You arrange tasks, helping your team members achieve new things and tackle new challenges. Your definition of success shifts towards the overall perspective of the company by delivering great features.&lt;/p&gt;
&lt;p&gt;I struggled a lot, but, eventually, I managed to help my team achieve many great things throughout the year. Additionally, I supported my director, splitting my team by hiring new people and reorganizing the structure of our engineering tribe. So everyone asked me why I considered stepping back from my role as manager. It took me months to understand my internal feelings. It felt like endless evenings sitting in my chair and reflecting on the day and the week, having hours of discussions with my wife during car trips. Today, with all these reflections and thinking about my future, I can boil it down to the following points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;My burning passion for writing code, solving problems and bringing value to users/customers.&lt;/li&gt;
&lt;li&gt;I still have a lot room to grow as a Software Engineer before being a manager&lt;/li&gt;
&lt;li&gt;I do not have the same passion for doing the job as a manager, in contrast to being a developer&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;developer-by-heart&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/ic-to-em/#developer-by-heart&quot;&gt;Developer by heart&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Quickly, I realized that being an engineering manager while also making significant contributions as a developer is almost impossible. Of course, you sporadically engage in programming tasks in order to keep in touch with your team&#39;s work, but you won&#39;t have the time to delve into core functionalities or focus topics.&lt;/p&gt;
&lt;p&gt;This reality was frustrating because of my strong desire to immerse myself in these tasks and be part of the process. It was painful to let go of things I used to do every day.&lt;/p&gt;
&lt;p&gt;I recall days when I spent hours coding, and the satisfaction it brought me. In the evening, my wife could instantly tell whether I&#39;d had a &#39;coding&#39; day or not.&lt;br /&gt;
This created a daily struggle to distribute tasks to my team, which I would have loved to solve myself.&lt;/p&gt;
&lt;p&gt;Additionally, I continuously had the feeling of missing opportunities to improve my own coding skills, which I saw necessary, to live up to my own expectations of a great software developer.&lt;/p&gt;
&lt;h3 id=&quot;no-passion-for-management&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/ic-to-em/#no-passion-for-management&quot;&gt;No passion for management&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I understood by reflecting on my work with the team. Throughout the year, we did numerous workshops and other sessions. I had many talks with other managers about how they were doing things, and I recognized over time that they had so much passion about these management tasks and skills that I never felt. Here, it is necessary to say that I tried hard to get into this passion, but never managed to find it within myself.&lt;br /&gt;
For me, it was always a burden to prepare a workshop or a team session, and in most cases, I did it somehow improvised. In the end, I was always disappointed about the sessions and said I would do it better next time, unsuccessfully.&lt;br /&gt;
While some innate aptitude towards managing people allowed me to wing most of the workshops or team sessions, it was never fun, and the lack of enjoyment would have probably led me towards a mediocre performance eventually.&lt;/p&gt;
&lt;h2 id=&quot;the-turning-point&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/ic-to-em/#the-turning-point&quot;&gt;The turning point&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Juggling the split between internal unhappiness and external praise brought me close to a dangerous mental level. I lost the inner fire I had for my job before, and it was difficult to get up in the morning for work while trying to repay the trust that was put into me with the promotion.&lt;br /&gt;
My entire life, I had one paradigm for work: As soon as I find myself in this daily routine of being unmotivated to start my job and not feeling happy anymore, I have to change something.&lt;/p&gt;
&lt;p&gt;It was a nerve-wracking experience to bring up my pinned-up fear of disappointment and communicate openly about my struggles in the next one-on-one meeting. It all vaporized with my manager showing empathy and support by restructuring the entire hiring strategy of the team to accommodate my wish to work as an IC again.&lt;/p&gt;
&lt;p&gt;Four weeks later in the context of an internal re-organisation, I was asked if I wanted to switch back immediately. I was so happy about this opportunity and took the chance directly. My director created an impact record, and I went through the official Promotion Board to identify the proper level in the IC track for me. With this, I got promoted from engineering manager to staff engineer at LeanIX. This allows me to do IC work, which is what I love, but additionally sets the right expectation towards me to be a leader as well.&lt;/p&gt;
&lt;h2 id=&quot;the-announcement-the-relief&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/ic-to-em/#the-announcement-the-relief&quot;&gt;The announcement - the relief&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Two weeks after the planning (everything was under the hood, due to reasons), the announcement of the organizational restructuring took place on November 15. I did not expect the impact of this event or the day. From one moment to the next, it felt like rocks fell off my shoulders. I could sleep again. I woke up and was burning to go to work and achieve things.&lt;/p&gt;
&lt;h2 id=&quot;at-the-end&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/ic-to-em/#at-the-end&quot;&gt;At the end&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In retrospect, those eleven months were a roller-coaster ride of learning, frustration, fun, mental issues, and understanding how much it is worth it to work in an environment where individual people count and everyone is valued.&lt;br /&gt;
Despite my tough journey, I want to encourage everyone who is willing to try out management to do the step, and to not feel bad if you figure out it is not how you intend to work. I think you cannot judge or finally decide if you don&#39;t try it yourself. It is important to take this step with the right people, but you should give yourself time to step into this role and see how it goes for you. I hope you have a similar great working environment as I had, which allowed me to take this journey, learn a lot and finally return to my most favorite job.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:michael@mharley.dev?subject=Re:%20%E2%80%9CMy%20way%20back%20from%20management%20to%20coding%E2%80%9D&quot;&gt;Reply via email&lt;/a&gt;&lt;/p&gt;
          </content>
        </entry><entry>
          <title>How Code Coverage can be useful</title>
          <link href="https://www.dev.nehranis.de/posts/code-coverage/"/>
          <updated>2023-08-04T00:00:00Z</updated>
          <id>https://www.dev.nehranis.de/posts/code-coverage/</id>
          <content type="html">
          &lt;p&gt;Code coverage is a critical aspect of software development that presumably determines the effectiveness of detecting faults and errors in a program. It measures the degree to which the source code of a program is tested by a set of test cases. The higher the code coverage, the more effective the testing is believed to be at identifying defects in the software.&lt;/p&gt;
&lt;p&gt;As a programmer, it is essential to have a good understanding of code coverage and how it works. This knowledge helps you to write better tests, identify potential bugs, and improve the overall quality of your code. This blog post provides my opinion on how to make code coverage a powerful tool rather than a burden.&lt;/p&gt;
&lt;h1 id=&quot;tl-dr&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/code-coverage/#tl-dr&quot;&gt;TL;DR&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;You might come to the point, where 100% code coverage is not useful and provides only overhead and feels like a burden. Be wise in choosing what to test, and test this with 100% coverage.&lt;/p&gt;
&lt;h2 id=&quot;definition&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/code-coverage/#definition&quot;&gt;Definition&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s take the definition from &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_coverage&quot;&gt;Wikipedia&lt;/a&gt; as a common ground to talk about code coverage.&lt;/p&gt;
&lt;p&gt;The main aspects of code coverage are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Function coverage
&lt;ul&gt;
&lt;li&gt;Which function is called within my tests?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Statement coverage
&lt;ul&gt;
&lt;li&gt;Are all statements executed during my tests?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Edge coverage
&lt;ul&gt;
&lt;li&gt;Are all edges in the logical flow covered by my tests?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Condition coverage
&lt;ul&gt;
&lt;li&gt;Are all boolean operations evaluated for both cases &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find additional explanations and more details, especially about the difference between &lt;code&gt;Code Coverage&lt;/code&gt; and &lt;code&gt;Test Coverage&lt;/code&gt; in this blog post: &lt;a href=&quot;https://saucelabs.com/resources/blog/code-coverage-vs-test-coverage&quot;&gt;https://saucelabs.com/resources/blog/code-coverage-vs-test-coverage&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;100-code-coverage-for-the-sake-of-it&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/code-coverage/#100-code-coverage-for-the-sake-of-it&quot;&gt;100% code coverage for the sake of it&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What do I mean by “100% code coverage for the sake of it”? Some people think 100% code coverage will bring them into the heaven of bug-free software. Unfortunately, this is not true, and from my perspective, 100% code coverage has a considerable disadvantage, as I experienced myself in past projects. In multiple projects, we decided to have 100% code coverage, and if we do not reach it, the CI/CD pipeline will fail. You will come across an example in the following, maybe you already remember similar experiences?&lt;/p&gt;
&lt;p&gt;Originally, it was really nice to see 100% for all existing code parts. As we reached a level of complexity in the project, it became really difficult to test every piece of the code base, and it felt even stupid at some point. Let me give you an example of when I had these feelings: We added one additional parameter to our DAO function, and I had to update 70 unit tests all over the place using the mocked DAO. In the end, the change introduced a regression that was not detected by all the unit tests.&lt;/p&gt;
&lt;p&gt;With a growing code base, spending more and more time writing and adapting many test cases for simple code changes just to hit every piece of code and achieve 100% code coverage started to be the wrong approach for us. Therefore, we changed our approach and started to identify key areas of our code base that had to reach 100% code coverage. Non-essential areas, like once-touched code in application configuration or setup files, have been removed from our coverage testing. This does not mean that we did not have tests for all these files.&lt;/p&gt;
&lt;p&gt;As already brought up above, one good example has been our DAOs, which went insane, writing unit tests for DAO files because we just tested implementation and not functionality, as everything has been mocked. This resulted in a lot of work when we had to change something and did not protect us from bugs. After our pivotal decision, we deleted all unit tests and started to write proper component tests, testing our DAOs with a real database. With this setup, we test functionality and not implementation, which reduces the number of tests we have to maintain or adapt and improves our code quality.&lt;/p&gt;
&lt;p&gt;Additionally, we started to write a few integration tests, testing the whole service in total from an API perspective, including the connection to the database.&lt;/p&gt;
&lt;p&gt;This gave us the proper confidence to release in a continuous pipeline but kept us fast in developing because we did not need to write or adjust many unit tests for every line of code.&lt;/p&gt;
&lt;h2 id=&quot;choose-important-areas-and-reach-100&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/code-coverage/#choose-important-areas-and-reach-100&quot;&gt;Choose important areas and reach 100%&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is the better way to identify critical areas of your application and reach 100% code coverage in these areas. The rest of the application should be tested via component or even some integration tests to have a stable release pipeline.&lt;/p&gt;
&lt;p&gt;What makes parts of your application critical?&lt;/p&gt;
&lt;p&gt;The following questions can help identify important parts of your application:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is the code part of the business logic, or just glue code?&lt;/li&gt;
&lt;li&gt;Does the code change often as it is part of the business logic, or is it written once and stays for a long time?&lt;/li&gt;
&lt;li&gt;Can I test functionality with my unit tests, or do I only test the implementation? (DAO example)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/code-coverage/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;100% code coverage in the whole application can quickly slow you down, without any further benefits or safety, while implementing new functionality or refactoring existing code. Instead, you should continuously analyse your code base, and identify the important parts of your business logic being part of code coverage analysis.&lt;/p&gt;
&lt;p&gt;Drive for 100% coverage in these areas and rely on a proper testing strategy, including the testing pyramid, by haven many unit tests, many component tests, and some integration tests, testing the entire application at once.&lt;/p&gt;
&lt;p&gt;This allows you fast development cycles, where you are still failing fast in the significant, and often changed areas. It is important to understand, that deciding for parts not having 100% code coverage is not equal to having 0% code coverage in these areas!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:michael@mharley.dev?subject=Re:%20%E2%80%9CHow%20Code%20Coverage%20can%20be%20useful%E2%80%9D&quot;&gt;Reply via email&lt;/a&gt;&lt;/p&gt;
          </content>
        </entry><entry>
          <title>90 days as Engineering Manager</title>
          <link href="https://www.dev.nehranis.de/posts/em-90-days/"/>
          <updated>2023-04-20T00:00:00Z</updated>
          <id>https://www.dev.nehranis.de/posts/em-90-days/</id>
          <content type="html">
          &lt;p&gt;On January 1st, I started as an Engineering Manager (EM) after a few years of being an Individual Contributor (IC). This blog post highlights my learnings throughout the first 90 days.&lt;/p&gt;
&lt;p&gt;When I got asked if I wanted to become an EM of one of the core teams in &lt;a href=&quot;https://www.leanix.net/de/produkte/enterprise-architecture-management&quot;&gt;LeanIX EAM&lt;/a&gt; Engineering, I felt uncertain whether I was ready for the EM role. I found the experience as an EM both fun and challenging. After 90 days, it is time for a first recap. It allowed me to learn a lot already, while I sometimes found myself pushed to my limits.&lt;/p&gt;
&lt;p&gt;Here are some key insights about what was fun and which challenges I faced during the first 90 days.&lt;/p&gt;
&lt;h2 id=&quot;the-fun-part&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/em-90-days/#the-fun-part&quot;&gt;The fun part&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the new team, I can work with many new nice and talented people. At first, it is great to have the opportunity to change your role and team within the same company. After two and a half years in the same team, it feels like starting a new job while staying in the same environment.&lt;/p&gt;
&lt;p&gt;The year started smoothly, everyone was excited, and I was really motivated to push and move ahead. This was a great feeling, after having some trouble finding motivation in a work environment I was not fully happy with anymore.&lt;/p&gt;
&lt;p&gt;Fully packed with motivation, I already had my first growth-opportunity in my second week: Welcoming and onboarding a new-joiner to the team. We used this situation to run a team workshop about values. This helped us to get to know each other on a more personal level. The day ended with a nice indoor mini-golf adventure and dinner. I&#39;m impressed by the notable impact that just one day of enjoyable activities, friendly competitions, and casual conversations outside of work can have on each team member&#39;s morale and connection.&lt;/p&gt;
&lt;p&gt;I thoroughly enjoy taking on challenges, and this role switch certainly presents one. Likewise, I&#39;ve encountered various new topics that I continue to navigate. Firstly, I returned to primarily focusing on Java backend development after two years of Frontend (FE) development in typescript. Secondly, I transitioned to a different domain within our application, which I haven&#39;t worked on in four years. Lastly, I&#39;ve embarked on an entirely new role, accompanied by novel responsibilities and tasks.&lt;br /&gt;
I could see how my motivation pushed me again to work on all and everything, which might not be the best idea. I was super excited to start with the new team and change the world.&lt;/p&gt;
&lt;p&gt;While all these things sound extremely delightful, high expectations from myself and a bunch of challenges made the transition an intense learning experience. Let&#39;s go through them one-by-one and digest their main learnings.&lt;/p&gt;
&lt;h2 id=&quot;challenges&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/em-90-days/#challenges&quot;&gt;Challenges&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As already mentioned, I was super motivated and excited to dig through everything. Quickly, I recognized that it was not easy jumping into a team that has been working together for years. As it is one of the core teams, I found a huge backlog in place, the team worked together and lived their processes for years already. What I underestimated was the fact that I came from an entirely different domain. It is challenging to dig into a new domain, while simultaneously living up to my expectation to converse and argue about changes to it. My unrealistic expectation was to prioritize tasks while trying fully to understand the system itself.&lt;br /&gt;
Moreover, I lacked code base knowledge. I worked in the services years ago already, but during my absence it evolved and changed a lot. So, it felt like a new service for me, which I have to handle again. This taught me that I need to involve my team in all these discussions and planning, as they know the domain already. I will also expand on this in the tips section.&lt;/p&gt;
&lt;p&gt;Next to the regular challenges you face as an IC as well, when you change a team, I now had seven direct reports I am responsible for. Right from the get go administrative responsibilities culminated in sick leaves, managing vacations and other personal issues. Handling all these new challenges without formal training would not have been possible without the support of a great EM team, especially my previous team&#39;s EM, and my direct manager. Their help allowed me to survive and navigate through these new tasks.&lt;/p&gt;
&lt;p&gt;One of the most challenging things was me. I put my expectations really high in the beginning and thought I will be able to directly work as an IC as well as a manager. The reality looked entirely different. In the first three months I had no day of focused coding, I just did some small reviews, and here and there one hour bug fixes. Which resulted in a huge frustration and I already asked myself if this was the right decision. This learning was the best, to understand that this transition is a journey and not a sprint you can achieve in two weeks.&lt;/p&gt;
&lt;p&gt;If you get the opportunity of becoming an EM in your company, and you like leading people, you should try it. Therefore, I come up with five tips, which helped me to wrap my head around the new situation and do not throw it away after the first obstacle.&lt;/p&gt;
&lt;h2 id=&quot;5-tips-for-new-e-ms&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/em-90-days/#5-tips-for-new-e-ms&quot;&gt;5 Tips for new EMs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are five tips, I would like to share with you to make the transition into any managing role much smoother.&lt;/p&gt;
&lt;h3 id=&quot;1-have-a-mentor&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/em-90-days/#1-have-a-mentor&quot;&gt;1. Have a mentor&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Having one or more individuals in a comparable position (such as a director or senior engineering manager) with significantly more experience in your new role can be incredibly beneficial. This mentorship enables you to openly discuss and ask numerous questions regarding unfamiliar situations or concerns that may arise. It&#39;s important to find someone with whom you can candidly share your thoughts, ideas, fears, challenges, and inquiries.&lt;/p&gt;
&lt;p&gt;This provides you the opportunity to learn things, clear your mind and put topics in the right context or give them the right weight.&lt;/p&gt;
&lt;p&gt;For me, it was really helpful to have a close connection and mentorship with my manager; he gave me a lot of trust and a clear view of expectations from the company. These were really helpful to calm down and accept, that not everything works from the beginning. With these conversations, I was able to adjust my own expectations to a realistic minimum, which directly relieved myself and brought a lot of fun back while working.&lt;/p&gt;
&lt;h3 id=&quot;2-have-1-1s-with-your-predecessor&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/em-90-days/#2-have-1-1s-with-your-predecessor&quot;&gt;2. Have 1:1s with your predecessor&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It always helps to have an ongoing exchange with the previous manager (if possible). They can provide you with information, tips about your team members you might never find out from themselves. You gain a fresh perspective on the subjects at hand and can learn more about the individuals you manage. While this doesn&#39;t negate the need for getting to know your direct reports personally, it can aid you in evaluating your own thoughts and opinions in relation to theirs.&lt;/p&gt;
&lt;h3 id=&quot;3-clear-scope-and-personal-goals&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/em-90-days/#3-clear-scope-and-personal-goals&quot;&gt;3. Clear scope and personal goals&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I started, I was fully overwhelmed with the number of topics, issues, potentially important things I wanted to work on. I sat down with my mentor and sketched out a clear scope to prioritize the most important tasks to work on. This was another lesson, which helped me to adjust my self expectations and understand that I cannot achieve and do everything right away.&lt;/p&gt;
&lt;p&gt;In contrast to the scope, which is more tailored to the teams&#39; needs, &lt;em&gt;goals&lt;/em&gt; should only aim at your personal growth. Within our Career Development Dialogues, I set some goals with my manager, namely what I aim to achieve during the next quarter. You can create a similar process on your own, if your company does not offer one already. Setting regular goals for yourself, and continuously re-evaluating them, might help you to stay on track and prioritize your responsibilities.&lt;/p&gt;
&lt;h3 id=&quot;4-set-a-timeframe&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/em-90-days/#4-set-a-timeframe&quot;&gt;4. Set a timeframe&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Set yourself a minimal timeframe to try out the new position. The responsibilities as an EM might be drastically different from your former work as an IC, so evaluating it over a pre-defined horizon can help to endure more challenging times. It is vital to communicate these expectations, as well as the time frame, with your support group (manager/director/EM).&lt;/p&gt;
&lt;h3 id=&quot;5-involve-your-new-team&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/em-90-days/#5-involve-your-new-team&quot;&gt;5. Involve your new team&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For me, it helped a lot to clarify from the beginning, that I am new in this job and not everything will be perfect. Actively ask your team for open feedback and support on all the topics you cannot manage yet. Use your lack of knowledge, and allow yourself to delegate more. Involve team members in discussions about subjects you may not be well-versed in yet. This not only empowers your team members, but also assists you in leading the team effectively, even if you haven&#39;t fully grasped the entire project scope. Additionally, you directly learn one of the most important skills a manager should have - being able to let go and delegate.&lt;/p&gt;
&lt;h2 id=&quot;my-conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/em-90-days/#my-conclusion&quot;&gt;My conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My first 90 days as an EM have been both enjoyable and challenging. The leadership team has provided remarkable support as I transitioned into this new role, with even our CTO taking a personal interest in my progress and offering ongoing assistance. I&#39;m grateful that LeanIX fosters an excellent engineering culture that encourages the growth of emerging talent. Already, I&#39;ve experienced significant personal and professional development, but I will continue to assess whether management is the right path for me, or if I need more time to nurture others&#39; growth.&lt;/p&gt;
&lt;p&gt;Regardless of my current role, I believe it&#39;s crucial to challenge oneself and regularly re-evaluate one&#39;s work to maintain a sense of enjoyment and fulfillment. For me, job satisfaction comes first, while financial rewards are secondary. I plan to revisit my decision to continue as an EM at least once a year, but I will also reflect on my choices every quarter, asking myself, &amp;quot;Is this the right path?&amp;quot;&lt;/p&gt;
&lt;p&gt;I&#39;m genuinely grateful for the chance to embark on this new journey and the trust placed in me as a young IC to take on a managerial role in one of the core teams.&lt;/p&gt;
&lt;p&gt;If you have the opportunity to become a manager and are interested in the experience, don&#39;t hesitate to seize it. This role will expand your horizons and offer significant growth potential for your future career, even if you eventually return to an IC role.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:michael@mharley.dev?subject=Re:%20%E2%80%9C90%20days%20as%20Engineering%20Manager%E2%80%9D&quot;&gt;Reply via email&lt;/a&gt;&lt;/p&gt;
          </content>
        </entry><entry>
          <title>Microservice testing series</title>
          <link href="https://www.dev.nehranis.de/posts/microservice-testing/"/>
          <updated>2022-08-09T00:00:00Z</updated>
          <id>https://www.dev.nehranis.de/posts/microservice-testing/</id>
          <content type="html">
          &lt;h2 id=&quot;test-pyramid&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#test-pyramid&quot;&gt;TestPyramid&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The TestPyramid example, by &lt;a href=&quot;https://martinfowler.com/bliki/TestPyramid.html&quot;&gt;Martin Fowler&lt;/a&gt;, is a visual supportive tool to get an idea of the distribution of your number of tests in the different levels of abstraction. It indicates to have much more low-level unit tests in contrast to high level BroadStackTests.&lt;/p&gt;
&lt;h2 id=&quot;tl-dr&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#tl-dr&quot;&gt;TL;DR&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The TestPyramid by &lt;a href=&quot;https://martinfowler.com/bliki/TestPyramid.html&quot;&gt;Martin Fowler&lt;/a&gt; differentiates between three levels.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;End-to-end tests, these are:&lt;br /&gt;
a. more error-prone as they can easily break by changes to the UI&lt;br /&gt;
b. expensive to write&lt;br /&gt;
c. exposed more often to non-determinism problems (or flakiness) (sometimes succeed, or fail)&lt;/li&gt;
&lt;li&gt;Layer in-between, &lt;a href=&quot;https://martinfowler.com/bliki/SubcutaneousTest.html&quot;&gt;Subcutaneous Tests&lt;/a&gt; (component tests) testing complex logic on an API layer and not the UI itself.&lt;/li&gt;
&lt;li&gt;Unit tests, the low-level tests testing a single functionality (unit) of the service.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;broad-stack-tests&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#broad-stack-tests&quot;&gt;BroadStackTests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://martinfowler.com/bliki/BroadStackTest.html&quot;&gt;BroadStackTests&lt;/a&gt; are introduced by Martin Fowler, and put together end-to-end (e2e) tests or so-called full-stack tests. In the end all are very similar but have different names. BroadStackTests are high level (e2e) UI tests. These might be recorded using tools like &lt;em&gt;Selenium&lt;/em&gt; or, even worse, done manually. They can be written in code using libraries or implement them on your own. Nowadays, you can run them with Chrome Headless within your CI/CD pipeline. They are discussed a lot, and from my point of view they are too expensive for a CI/CD pipeline. Expensive in terms of duration and implementation complexity.&lt;/p&gt;
&lt;p&gt;A deeper argumentation, why not to use e2e tests, you can find in this &lt;a href=&quot;https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html&quot;&gt;Google blog post&lt;/a&gt;. As of today, the &lt;a href=&quot;https://testing-library.com/docs/&quot;&gt;testing library&lt;/a&gt;, provides you many possibilities to test different frontend frameworks in a user-centric way. This library allows you to mimic the usage of your components by a user. This is still faster than e2e tests and well scoped around your component.&lt;/p&gt;
&lt;h2 id=&quot;component-tests&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#component-tests&quot;&gt;Component Tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Component tests are the next level of tests which are scoped to the service they test. They are easier to write, as you might use the direct API to call the service and test the service isolated, instead of using a BroadStackTest via the UI.&lt;/p&gt;
&lt;p&gt;More details about component tests can be found &lt;a href=&quot;https://martinfowler.com/bliki/ComponentTest.html&quot;&gt;here&lt;/a&gt; and in the slides of Toby Clemson &lt;a href=&quot;https://martinfowler.com/articles/microservice-testing/#testing-component-introduction&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;integration-tests&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#integration-tests&quot;&gt;Integration Tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Integration tests are the second smallest and scoped test level in the pyramid. They test a set of modules working together and therefore scope on a sub-system of the service. More information you can find in the &lt;a href=&quot;https://martinfowler.com/articles/microservice-testing/#testing-integration-introduction&quot;&gt;slides&lt;/a&gt; of Toby Clemson.&lt;/p&gt;
&lt;h2 id=&quot;unit-tests&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#unit-tests&quot;&gt;Unit Tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unit tests are the smallest piece of tests in the TestPyramid. They are narrowed down to a single functionality and have the smallest scope. You differentiate between &lt;em&gt;Sociable unit testing&lt;/em&gt; and &lt;em&gt;Solitary unit testing&lt;/em&gt;. &lt;em&gt;Sociable&lt;/em&gt; tests test the object through the interface and include dependencies. &lt;em&gt;Solitary&lt;/em&gt; tests isolate the object and test the communication to dependencies, which are replaced by mocks. A detailed introduction about unit tests you can find again in Toby Clemson&#39;s &lt;a href=&quot;https://martinfowler.com/articles/microservice-testing/#testing-unit-introduction&quot;&gt;slide deck&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we know the general terms of different test types, which we will take a closer look at. The TestPyramid provides a visualization, how to distribute your number of tests. It does not help how to decide, which test is worth it and which not.&lt;/p&gt;
&lt;p&gt;Throughout this series, I will provide some examples and best practices we within my team during implementing a NodeJS backend service, but the field of testing is much broader and has a lot more topics to come up with, which cannot be captured throughout this series. I&#39;ll try to provide additional resources for further reading.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:michael@mharley.dev?subject=Re:%20%E2%80%9CMicroservice%20testing%20series%E2%80%9D&quot;&gt;Reply via email&lt;/a&gt;&lt;/p&gt;
          </content>
        </entry><entry>
          <title>Knex.js promise resolution decoded</title>
          <link href="https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/"/>
          <updated>2022-07-29T00:00:00Z</updated>
          <id>https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/</id>
          <content type="html">
          &lt;p&gt;This blog post tackles a small but important detail in the Knex.js &lt;code&gt;QueryBuilder&lt;/code&gt; interface. Misused, it can cause race conditions and unexpected behavior within your application using your DAOs.&lt;/p&gt;
&lt;h2 id=&quot;the-issue&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#the-issue&quot;&gt;The issue&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s try to understand the issue with help of the following example DAO:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fooDAO &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  insert&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FooUpdate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s walk through the differences between both functions. The first function &lt;code&gt;delete&lt;/code&gt; returns a &lt;code&gt;Promise&lt;/code&gt; object, and the query is executed against the database. The second function &lt;code&gt;insert&lt;/code&gt; returns a &lt;code&gt;QueryBuilder&lt;/code&gt; object instead, even though, the typing states, it returns a &lt;code&gt;Promise&amp;lt;Foo[]&amp;gt;&lt;/code&gt;. In this case, the query is not executed directly. We will take a closer look later, why this is the case.&lt;/p&gt;
&lt;p&gt;You might argue, why is the compiler not complaining as the typing is obviously wrong, and why does it have different behavior?&lt;/p&gt;
&lt;h3 id=&quot;the-typing&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#the-typing&quot;&gt;The typing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The compiler is not complaining because of the &lt;a href=&quot;https://promisesaplus.com/#requirements&quot;&gt;Promise/A+&lt;/a&gt; definition. This definition states, that an &lt;em&gt;Object&lt;/em&gt; is a &lt;code&gt;Promise&lt;/code&gt; as long as a &lt;code&gt;then(onFulfilled, onRejected)&lt;/code&gt; method is implemented. Checking the typing or &lt;a href=&quot;http://knexjs.org/guide/interfaces.html#promises&quot;&gt;documentation&lt;/a&gt; of the &lt;code&gt;QueryBuilder&lt;/code&gt; interface, you can see that it defines a &lt;code&gt;then&lt;/code&gt; method. Therefore, it is treated as &lt;code&gt;Promise&lt;/code&gt; during type checks.&lt;/p&gt;
&lt;p&gt;This misleading typing can result in race conditions or unexpected state within your application. If you mix this up within your DAOs, your queries will not be executed in the order you might think. For some functions, the query is executed while calling the DAO function itself and for the others it depends on usage in your application.&lt;/p&gt;
&lt;p&gt;But why is this the case? Let&#39;s walk through the difference of both implementations together.&lt;/p&gt;
&lt;h3 id=&quot;the-different-behavior&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#the-different-behavior&quot;&gt;The different behavior&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You must know that, Knex.js only &lt;em&gt;executes&lt;/em&gt; the query to the database, by calling the &lt;code&gt;then&lt;/code&gt; method and turns the &lt;code&gt;QueryBuilder&lt;/code&gt; object into a &lt;code&gt;Promise&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;p&gt;Let&#39;s take a closer look at the functions and understand, where the different behavior comes from. The first function uses &lt;code&gt;await&lt;/code&gt; with the &lt;em&gt;QueryBuilder&lt;/em&gt; creation, which implicitly calls the &lt;code&gt;then&lt;/code&gt; method of the following &lt;em&gt;Promise&lt;/em&gt; or object. Therefore, it is handy, that the &lt;em&gt;QueryBuilder&lt;/em&gt; implements the same interface as &lt;em&gt;Promise&lt;/em&gt; because you just can use &lt;code&gt;await&lt;/code&gt; or &lt;code&gt;then&lt;/code&gt; directly on the &lt;em&gt;QueryBuilder&lt;/em&gt; and retrieve a Promise with the result or error. The second function just returns the created &lt;em&gt;QueryBuilder&lt;/em&gt; object, which does not result in any query execution while calling the function itself.&lt;/p&gt;
&lt;p&gt;Assume the following usage (might not be a real usage, but it helps to get the point).&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;doSomething&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;&lt;br /&gt;    fooDAO&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fooId&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;HelloWorld&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// do other stuff&lt;/span&gt;&lt;br /&gt;    fooDAO&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fooId&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example usage, the developer just calls the DAO functions to add the item, but is doing it asynchronously and does not await the result. Then something is going on and at some point the delete function is called to remove the item. Here again, no await is used nor the &lt;code&gt;.then()&lt;/code&gt; method is called. This usage of the “correct” typed DAO (at least the compiler is not complaining) would result in a broken state. The item would never be deleted, as the &lt;code&gt;then&lt;/code&gt; method of the returned &lt;code&gt;QueryBuilder&lt;/code&gt; is never called.&lt;/p&gt;
&lt;h2 id=&quot;the-correct-typing&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#the-correct-typing&quot;&gt;The correct typing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s re-write the DAO with correct typing, which indicates the different return types for both functions correctly.&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fooDAO &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  insert&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FooUpdate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; QueryBuilder&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This improved typing for the &lt;code&gt;insert&lt;/code&gt; function now indicates clearly that a &lt;code&gt;QueryBuilder&lt;/code&gt; is returned and not a &lt;code&gt;Promise&lt;/code&gt;. It might help to prevent issues like described above, but is not a nice interface and usage for the DAO, is it?&lt;/p&gt;
&lt;p&gt;Let&#39;s transform the DAO to have a pleasant interface and user experience.&lt;/p&gt;
&lt;h2 id=&quot;the-better-way&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#the-better-way&quot;&gt;The better way&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This section is named “The better way” on purpose because I want to avoid stating it is the right and only way.&lt;/p&gt;
&lt;p&gt;The small but important change is, that we add the &lt;code&gt;await&lt;/code&gt; within the &lt;code&gt;insert&lt;/code&gt; function to &lt;em&gt;execute&lt;/em&gt; the query on function call and return a &lt;code&gt;Promise&lt;/code&gt; instead of the &lt;code&gt;QueryBuilder&lt;/code&gt; as in the above example.&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fooDAO &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  insert&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FooUpdate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This fixed DAO always ensures, that the queries are really being executed on function call and return a &lt;code&gt;Promise&lt;/code&gt; which can be handled properly.&lt;br /&gt;
I would argue this is the better approach, than returning a &lt;code&gt;QueryBuilder&lt;/code&gt; from DAO functions. Therefore, I recommend to always return a real &lt;em&gt;Promises&lt;/em&gt; and not &lt;code&gt;QueryBuilder&lt;/code&gt; objects.&lt;br /&gt;
This makes the interface much cleaner and easier to understand. In addition, this approach does not leak internal logic to the outside.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Typescript helps a lot in preventing you from introducing bugs, but it is not the silver bullet for everything. There might be other libraries or functions having similar typing in place, therefore always understand the libraries you use.&lt;br /&gt;
For Knex.js, be aware of the typing issue with the &lt;code&gt;QueryBuilder&lt;/code&gt; and &lt;code&gt;Promise&lt;/code&gt; object, to prevent unexpected behavior. Nevertheless, it is the better way to implement DAOs in a way encapsulating the queries and only return data within a &lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:michael@mharley.dev?subject=Re:%20%E2%80%9CKnex.js%20promise%20resolution%20decoded%E2%80%9D&quot;&gt;Reply via email&lt;/a&gt;&lt;/p&gt;
          </content>
        </entry><entry>
          <title>Introducing my new blog</title>
          <link href="https://www.dev.nehranis.de/posts/introduction/"/>
          <updated>2022-07-21T00:00:00Z</updated>
          <id>https://www.dev.nehranis.de/posts/introduction/</id>
          <content type="html">
          &lt;h1 id=&quot;welcome-to-my-new-blog&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/introduction/#welcome-to-my-new-blog&quot;&gt;Welcome to my new blog!&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I am very excited to start this new chapter in my career. On this blog I try to post about stuff I work with, I learn or just think it is important to share.&lt;/p&gt;
&lt;p&gt;This is my first blog, and I am willing to learn and improve it over time. I am really happy to hear feedback and improvement ideas, so feel free to contact me via the different channels available.&lt;/p&gt;
&lt;p&gt;Niko&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:michael@mharley.dev?subject=Re:%20%E2%80%9CIntroducing%20my%20new%20blog%E2%80%9D&quot;&gt;Reply via email&lt;/a&gt;&lt;/p&gt;
          </content>
        </entry>
</feed>