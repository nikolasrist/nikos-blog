<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nikolas Rist</title>
  <subtitle></subtitle>
  <link href="https://www.dev.nehranis.de/rss.xml" rel="self"/>
  <link href="https://www.dev.nehranis.de/"/>
  <updated>2022-08-09T00:00:00Z</updated>
  <id>https://www.dev.nehranis.de//</id>
  <author>
    <name>Nikolas Rist</name>
    <email>nehranis@gmail.com</email>
  </author><entry>
          <title>Microservice testing series</title>
          <link href="https://www.dev.nehranis.de/posts/microservice-testing/"/>
          <updated>2022-08-09T00:00:00Z</updated>
          <id>https://www.dev.nehranis.de/posts/microservice-testing/</id>
          <content type="html">
          &lt;h2 id=&quot;test-pyramid&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#test-pyramid&quot;&gt;TestPyramid&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The TestPyramid example, by &lt;a href=&quot;https://martinfowler.com/bliki/TestPyramid.html&quot;&gt;Martin Fowler&lt;/a&gt;, is a visual supportive tool to get an idea of the distribution of your number of tests in the different levels of abstraction. It indicates to have much more low-level unit tests in contrast to high level BroadStackTests.&lt;/p&gt;
&lt;h2 id=&quot;tl-dr&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#tl-dr&quot;&gt;TL;DR&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The TestPyramid by &lt;a href=&quot;https://martinfowler.com/bliki/TestPyramid.html&quot;&gt;Martin Fowler&lt;/a&gt; differentiates between three levels.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;End-to-end tests, these are:&lt;br /&gt;
a. more error-prone as they can easily break by changes to the UI&lt;br /&gt;
b. expensive to write&lt;br /&gt;
c. exposed more often to non-determinism problems (or flakiness) (sometimes succeed, or fail)&lt;/li&gt;
&lt;li&gt;Layer in-between, &lt;a href=&quot;https://martinfowler.com/bliki/SubcutaneousTest.html&quot;&gt;Subcutaneous Tests&lt;/a&gt; (component tests) testing complex logic on an API layer and not the UI itself.&lt;/li&gt;
&lt;li&gt;Unit tests, the low-level tests testing a single functionality (unit) of the service.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;broad-stack-tests&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#broad-stack-tests&quot;&gt;BroadStackTests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://martinfowler.com/bliki/BroadStackTest.html&quot;&gt;BroadStackTests&lt;/a&gt; are introduced by Martin Fowler, and put together end-to-end (e2e) tests or so-called full-stack tests. In the end all are very similar but have different names. BroadStackTests are high level (e2e) UI tests. These might be recorded using tools like &lt;em&gt;Selenium&lt;/em&gt; or, even worse, done manually. They can be written in code using libraries or implement them on your own. Nowadays, you can run them with Chrome Headless within your CI/CD pipeline. They are discussed a lot, and from my point of view they are too expensive for a CI/CD pipeline. Expensive in terms of duration and implementation complexity.&lt;/p&gt;
&lt;p&gt;A deeper argumentation, why not to use e2e tests, you can find in this &lt;a href=&quot;https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html&quot;&gt;Google blog post&lt;/a&gt;. As of today, the &lt;a href=&quot;https://testing-library.com/docs/&quot;&gt;testing library&lt;/a&gt;, provides you many possibilities to test different frontend frameworks in a user-centric way. This library allows you to mimic the usage of your components by a user. This is still faster than e2e tests and well scoped around your component.&lt;/p&gt;
&lt;h2 id=&quot;component-tests&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#component-tests&quot;&gt;Component Tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Component tests are the next level of tests which are scoped to the service they test. They are easier to write, as you might use the direct API to call the service and test the service isolated, instead of using a BroadStackTest via the UI.&lt;/p&gt;
&lt;p&gt;More details about component tests can be found &lt;a href=&quot;https://martinfowler.com/bliki/ComponentTest.html&quot;&gt;here&lt;/a&gt; and in the slides of Toby Clemson &lt;a href=&quot;https://martinfowler.com/articles/microservice-testing/#testing-component-introduction&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;integration-tests&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#integration-tests&quot;&gt;Integration Tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Integration tests are the second smallest and scoped test level in the pyramid. They test a set of modules working together and therefore scope on a sub-system of the service. More information you can find in the &lt;a href=&quot;https://martinfowler.com/articles/microservice-testing/#testing-integration-introduction&quot;&gt;slides&lt;/a&gt; of Toby Clemson.&lt;/p&gt;
&lt;h2 id=&quot;unit-tests&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#unit-tests&quot;&gt;Unit Tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unit tests are the smallest piece of tests in the TestPyramid. They are narrowed down to a single functionality and have the smallest scope. You differentiate between &lt;em&gt;Sociable unit testing&lt;/em&gt; and &lt;em&gt;Solitary unit testing&lt;/em&gt;. &lt;em&gt;Sociable&lt;/em&gt; tests test the object through the interface and include dependencies. &lt;em&gt;Solitary&lt;/em&gt; tests isolate the object and test the communication to dependencies, which are replaced by mocks. A detailed introduction about unit tests you can find again in Toby Clemson&#39;s &lt;a href=&quot;https://martinfowler.com/articles/microservice-testing/#testing-unit-introduction&quot;&gt;slide deck&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/microservice-testing/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we know the general terms of different test types, which we will take a closer look at. The TestPyramid provides a visualization, how to distribute your number of tests. It does not help how to decide, which test is worth it and which not.&lt;/p&gt;
&lt;p&gt;Throughout this series, I will provide some examples and best practices we within my team during implementing a NodeJS backend service, but the field of testing is much broader and has a lot more topics to come up with, which cannot be captured throughout this series. I&#39;ll try to provide additional resources for further reading.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:michael@mharley.dev?subject=Re:%20%E2%80%9CMicroservice%20testing%20series%E2%80%9D&quot;&gt;Reply via email&lt;/a&gt;&lt;/p&gt;
          </content>
        </entry><entry>
          <title>Knex.js promise resolution decoded</title>
          <link href="https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/"/>
          <updated>2022-07-29T00:00:00Z</updated>
          <id>https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/</id>
          <content type="html">
          &lt;p&gt;This blog post tackles a small but important detail in the Knex.js &lt;code&gt;QueryBuilder&lt;/code&gt; interface. Misused, it can cause race conditions and unexpected behavior within your application using your DAOs.&lt;/p&gt;
&lt;h2 id=&quot;the-issue&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#the-issue&quot;&gt;The issue&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s try to understand the issue with help of the following example DAO:&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fooDAO &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  insert&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FooUpdate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s walk through the differences between both functions. The first function &lt;code&gt;delete&lt;/code&gt; returns a &lt;code&gt;Promise&lt;/code&gt; object, and the query is executed against the database. The second function &lt;code&gt;insert&lt;/code&gt; returns a &lt;code&gt;QueryBuilder&lt;/code&gt; object instead, even though, the typing states, it returns a &lt;code&gt;Promise&amp;lt;Foo[]&amp;gt;&lt;/code&gt;. In this case, the query is not executed directly. We will take a closer look later, why this is the case.&lt;/p&gt;
&lt;p&gt;You might argue, why is the compiler not complaining as the typing is obviously wrong, and why does it have different behavior?&lt;/p&gt;
&lt;h3 id=&quot;the-typing&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#the-typing&quot;&gt;The typing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The compiler is not complaining because of the &lt;a href=&quot;https://promisesaplus.com/#requirements&quot;&gt;Promise/A+&lt;/a&gt; definition. This definition states, that an &lt;em&gt;Object&lt;/em&gt; is a &lt;code&gt;Promise&lt;/code&gt; as long as a &lt;code&gt;then(onFulfilled, onRejected)&lt;/code&gt; method is implemented. Checking the typing or &lt;a href=&quot;http://knexjs.org/guide/interfaces.html#promises&quot;&gt;documentation&lt;/a&gt; of the &lt;code&gt;QueryBuilder&lt;/code&gt; interface, you can see that it defines a &lt;code&gt;then&lt;/code&gt; method. Therefore, it is treated as &lt;code&gt;Promise&lt;/code&gt; during type checks.&lt;/p&gt;
&lt;p&gt;This misleading typing can result in race conditions or unexpected state within your application. If you mix this up within your DAOs, your queries will not be executed in the order you might think. For some functions, the query is executed while calling the DAO function itself and for the others it depends on usage in your application.&lt;/p&gt;
&lt;p&gt;But why is this the case? Let&#39;s walk through the difference of both implementations together.&lt;/p&gt;
&lt;h3 id=&quot;the-different-behavior&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#the-different-behavior&quot;&gt;The different behavior&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You must know that, Knex.js only &lt;em&gt;executes&lt;/em&gt; the query to the database, by calling the &lt;code&gt;then&lt;/code&gt; method and turns the &lt;code&gt;QueryBuilder&lt;/code&gt; object into a &lt;code&gt;Promise&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;p&gt;Let&#39;s take a closer look at the functions and understand, where the different behavior comes from. The first function uses &lt;code&gt;await&lt;/code&gt; with the &lt;em&gt;QueryBuilder&lt;/em&gt; creation, which implicitly calls the &lt;code&gt;then&lt;/code&gt; method of the following &lt;em&gt;Promise&lt;/em&gt; or object. Therefore, it is handy, that the &lt;em&gt;QueryBuilder&lt;/em&gt; implements the same interface as &lt;em&gt;Promise&lt;/em&gt; because you just can use &lt;code&gt;await&lt;/code&gt; or &lt;code&gt;then&lt;/code&gt; directly on the &lt;em&gt;QueryBuilder&lt;/em&gt; and retrieve a Promise with the result or error. The second function just returns the created &lt;em&gt;QueryBuilder&lt;/em&gt; object, which does not result in any query execution while calling the function itself.&lt;/p&gt;
&lt;p&gt;Assume the following usage (might not be a real usage, but it helps to get the point).&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;doSomething&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;&lt;br /&gt;    fooDAO&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fooId&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;HelloWorld&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// do other stuff&lt;/span&gt;&lt;br /&gt;    fooDAO&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fooId&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example usage, the developer just calls the DAO functions to add the item, but is doing it asynchronously and does not await the result. Then something is going on and at some point the delete function is called to remove the item. Here again, no await is used nor the &lt;code&gt;.then()&lt;/code&gt; method is called. This usage of the “correct” typed DAO (at least the compiler is not complaining) would result in a broken state. The item would never be deleted, as the &lt;code&gt;then&lt;/code&gt; method of the returned &lt;code&gt;QueryBuilder&lt;/code&gt; is never called.&lt;/p&gt;
&lt;h2 id=&quot;the-correct-typing&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#the-correct-typing&quot;&gt;The correct typing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s re-write the DAO with correct typing, which indicates the different return types for both functions correctly.&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fooDAO &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  insert&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FooUpdate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; QueryBuilder&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This improved typing for the &lt;code&gt;insert&lt;/code&gt; function now indicates clearly that a &lt;code&gt;QueryBuilder&lt;/code&gt; is returned and not a &lt;code&gt;Promise&lt;/code&gt;. It might help to prevent issues like described above, but is not a nice interface and usage for the DAO, is it?&lt;/p&gt;
&lt;p&gt;Let&#39;s transform the DAO to have a pleasant interface and user experience.&lt;/p&gt;
&lt;h2 id=&quot;the-better-way&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#the-better-way&quot;&gt;The better way&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This section is named “The better way” on purpose because I want to avoid stating it is the right and only way.&lt;/p&gt;
&lt;p&gt;The small but important change is, that we add the &lt;code&gt;await&lt;/code&gt; within the &lt;code&gt;insert&lt;/code&gt; function to &lt;em&gt;execute&lt;/em&gt; the query on function call and return a &lt;code&gt;Promise&lt;/code&gt; instead of the &lt;code&gt;QueryBuilder&lt;/code&gt; as in the above example.&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fooDAO &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  insert&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Knex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FooUpdate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; pg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This fixed DAO always ensures, that the queries are really being executed on function call and return a &lt;code&gt;Promise&lt;/code&gt; which can be handled properly.&lt;br /&gt;
I would argue this is the better approach, than returning a &lt;code&gt;QueryBuilder&lt;/code&gt; from DAO functions. Therefore, I recommend to always return a real &lt;em&gt;Promises&lt;/em&gt; and not &lt;code&gt;QueryBuilder&lt;/code&gt; objects.&lt;br /&gt;
This makes the interface much cleaner and easier to understand. In addition, this approach does not leak internal logic to the outside.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/knex-promise-resolution-decoded/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Typescript helps a lot in preventing you from introducing bugs, but it is not the silver bullet for everything. There might be other libraries or functions having similar typing in place, therefore always understand the libraries you use.&lt;br /&gt;
For Knex.js, be aware of the typing issue with the &lt;code&gt;QueryBuilder&lt;/code&gt; and &lt;code&gt;Promise&lt;/code&gt; object, to prevent unexpected behavior. Nevertheless, it is the better way to implement DAOs in a way encapsulating the queries and only return data within a &lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:michael@mharley.dev?subject=Re:%20%E2%80%9CKnex.js%20promise%20resolution%20decoded%E2%80%9D&quot;&gt;Reply via email&lt;/a&gt;&lt;/p&gt;
          </content>
        </entry><entry>
          <title>Introducing my new blog</title>
          <link href="https://www.dev.nehranis.de/posts/introduction/"/>
          <updated>2022-07-21T00:00:00Z</updated>
          <id>https://www.dev.nehranis.de/posts/introduction/</id>
          <content type="html">
          &lt;h1 id=&quot;welcome-to-my-new-blog&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://www.dev.nehranis.de/posts/introduction/#welcome-to-my-new-blog&quot;&gt;Welcome to my new blog!&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I am very excited to start this new chapter in my career. On this blog I try to post about stuff I work with, I learn or just think it is important to share.&lt;/p&gt;
&lt;p&gt;This is my first blog, and I am willing to learn and improve it over time. I am really happy to hear feedback and improvement ideas, so feel free to contact me via the different channels available.&lt;/p&gt;
&lt;p&gt;Niko&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:michael@mharley.dev?subject=Re:%20%E2%80%9CIntroducing%20my%20new%20blog%E2%80%9D&quot;&gt;Reply via email&lt;/a&gt;&lt;/p&gt;
          </content>
        </entry>
</feed>